// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package osu.kip.prodmis.config;

import java.lang.Override;
import java.util.List;
import java.util.Locale;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Primary;
import org.springframework.format.FormatterRegistry;
import org.springframework.format.support.FormattingConversionService;
import org.springframework.validation.beanvalidation.LocalValidatorFactoryBean;
import org.springframework.web.method.support.HandlerMethodArgumentResolver;
import org.springframework.web.servlet.LocaleResolver;
import org.springframework.web.servlet.config.annotation.InterceptorRegistry;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;
import org.springframework.web.servlet.i18n.LocaleChangeInterceptor;
import org.springframework.web.servlet.i18n.SessionLocaleResolver;
import osu.kip.prodmis.config.WebMvcConfiguration;
import osu.kip.prodmis.controler.CommentFormatter;
import osu.kip.prodmis.controler.DocumentFormatter;
import osu.kip.prodmis.controler.DocumentRevisionFormatter;
import osu.kip.prodmis.controler.OrganizationFormatter;
import osu.kip.prodmis.controler.ProductFormatter;
import osu.kip.prodmis.controler.UserLoginFormatter;
import osu.kip.prodmis.service.api.CommentService;
import osu.kip.prodmis.service.api.DocumentRevisionService;
import osu.kip.prodmis.service.api.DocumentService;
import osu.kip.prodmis.service.api.OrganizationService;
import osu.kip.prodmis.service.api.ProductService;
import osu.kip.prodmis.service.api.UserLoginService;
import osu.kip.prodmis.web.method.support.GlobalSearchHandlerMethodArgumentResolver;

privileged aspect WebMvcConfiguration_Roo_WebMvcConfiguration {
    
    declare parents: WebMvcConfiguration extends WebMvcConfigurerAdapter;
    
    declare @type: WebMvcConfiguration: @Configuration;
    
    @Autowired
    private CommentService WebMvcConfiguration.commentService;
    
    @Autowired
    private DocumentService WebMvcConfiguration.documentService;
    
    @Autowired
    private DocumentRevisionService WebMvcConfiguration.documentRevisionService;
    
    @Autowired
    private OrganizationService WebMvcConfiguration.organizationService;
    
    @Autowired
    private ProductService WebMvcConfiguration.productService;
    
    @Autowired
    private UserLoginService WebMvcConfiguration.userLoginService;
    
    @Primary
    @Bean
    public LocalValidatorFactoryBean WebMvcConfiguration.validator() {
        return new LocalValidatorFactoryBean();
    }
    
    @Override
    public void WebMvcConfiguration.addFormatters(FormatterRegistry registry) {
        if (!(registry instanceof FormattingConversionService)) {
            return;
        }
        FormattingConversionService conversionService = (FormattingConversionService) registry;
        
        // Entity Formatters
        conversionService.addFormatter(new CommentFormatter(commentService, conversionService));
        conversionService.addFormatter(new DocumentFormatter(documentService, conversionService));
        conversionService.addFormatter(new DocumentRevisionFormatter(documentRevisionService, conversionService));
        conversionService.addFormatter(new OrganizationFormatter(organizationService, conversionService));
        conversionService.addFormatter(new ProductFormatter(productService, conversionService));
        conversionService.addFormatter(new UserLoginFormatter(userLoginService, conversionService));
    }
    
    @Bean
    public LocaleResolver WebMvcConfiguration.localeResolver() {
        SessionLocaleResolver localeResolver = new SessionLocaleResolver();
        localeResolver.setDefaultLocale(Locale.ENGLISH);
        return localeResolver;
    }
    
    @Bean
    public LocaleChangeInterceptor WebMvcConfiguration.localeChangeInterceptor() {
        LocaleChangeInterceptor localeChangeInterceptor = new LocaleChangeInterceptor();
        localeChangeInterceptor.setParamName("lang");
        return localeChangeInterceptor;
    }
    
    @Override
    public void WebMvcConfiguration.addInterceptors(InterceptorRegistry registry) {
        registry.addInterceptor(localeChangeInterceptor());
    }
    
    @Override
    public void WebMvcConfiguration.addArgumentResolvers(List<HandlerMethodArgumentResolver> argumentResolvers) {
        argumentResolvers.add(globalSearchResolver());
    }
    
    public GlobalSearchHandlerMethodArgumentResolver WebMvcConfiguration.globalSearchResolver() {
        return new GlobalSearchHandlerMethodArgumentResolver();
    }
    
}
