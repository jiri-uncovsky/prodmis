// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package osu.kip.prodmis.controler;

import javax.validation.Valid;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;
import osu.kip.prodmis.controler.DocumentController;
import osu.kip.prodmis.datatables.DatatablesData;
import osu.kip.prodmis.datatables.DatatablesPageable;
import osu.kip.prodmis.domain.Document;
import osu.kip.prodmis.domain.DocumentRevision;
import osu.kip.prodmis.repository.GlobalSearch;

privileged aspect DocumentController_Roo_Thymeleaf {
    
    @RequestMapping(method = RequestMethod.GET, produces = MediaType.TEXT_HTML_VALUE)
    public String DocumentController.list(Model model) {
        return "documents/list";
    }
    
    @RequestMapping(method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseBody
    public Page<Document> DocumentController.list(GlobalSearch search, Pageable pageable) {
        Page<Document> document = documentService.findAll(search, pageable);
        return document;
    }
    
    @RequestMapping(method = RequestMethod.GET, produces = "application/vnd.datatables+json")
    @ResponseBody
    public DatatablesData<Document> DocumentController.list(GlobalSearch search, DatatablesPageable pageable, @RequestParam("draw") Integer draw) {
        Page<Document> document = list(search, pageable);
        long allAvailableDocument = documentService.count();
        return new DatatablesData<Document>(document, allAvailableDocument, draw);
    }
    
    @RequestMapping(value = "/create-form", method = RequestMethod.GET, produces = MediaType.TEXT_HTML_VALUE)
    public String DocumentController.createForm(Model model) {
        model.addAttribute(new Document());
        populateForm(model);
        return "documents/create";
    }
    
    @RequestMapping(method = RequestMethod.POST, produces = MediaType.TEXT_HTML_VALUE)
    public String DocumentController.create(@Valid @ModelAttribute Document document, BindingResult result, RedirectAttributes redirectAttrs, Model model) {
        if (result.hasErrors()) {
            populateForm(model);
            return "documents/create";
        }
        Document newDocument = documentService.save(document);
        redirectAttrs.addAttribute("id", newDocument.getId());
        return "redirect:/documents/{id}";
    }
    
    @RequestMapping(value = "/{document}/edit-form", method = RequestMethod.GET, produces = MediaType.TEXT_HTML_VALUE)
    public String DocumentController.editForm(@PathVariable("document") Document document, Model model) {
        populateForm(model);
        return "documents/edit";
    }
    
    @RequestMapping(value = "/{document}", method = RequestMethod.PUT, produces = MediaType.TEXT_HTML_VALUE)
    public String DocumentController.update(@Valid @ModelAttribute Document document, BindingResult result, RedirectAttributes redirectAttrs, Model model) {
        if (result.hasErrors()) {
            populateForm(model);
            return "documents/edit";
        }
        Document savedDocument = documentService.save(document);
        redirectAttrs.addAttribute("id", savedDocument.getId());
        return "redirect:/documents/{id}";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, produces = MediaType.TEXT_HTML_VALUE)
    public String DocumentController.delete(@PathVariable("id") Long id, Model model) {
        documentService.delete(id);
        return "redirect:/documents";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseBody
    public ResponseEntity DocumentController.delete(@PathVariable("id") Long id) {
        documentService.delete(id);
        return new ResponseEntity(HttpStatus.OK);
    }
    
    @RequestMapping(value = "/{document}", method = RequestMethod.GET, produces = MediaType.TEXT_HTML_VALUE)
    public String DocumentController.show(@PathVariable("document") Document document, Model model) {
        return "documents/show";
    }
    
    @RequestMapping(value = "/{id}/documentrevisions/", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseBody
    public Page<DocumentRevision> DocumentController.listDocumentRevision(@PathVariable("id") Document id, GlobalSearch search, Pageable pageable) {
        Page<DocumentRevision> documentRevision = documentRevisionService.findAllByDocument(id, search, pageable);
        return documentRevision;
    }
    
    @RequestMapping(method = RequestMethod.GET, value = "/{id}/documentrevisions/", produces = "application/vnd.datatables+json")
    @ResponseBody
    public DatatablesData<DocumentRevision> DocumentController.listDocumentRevision(@PathVariable("id") Document id, GlobalSearch search, Pageable pageable, @RequestParam("draw") Integer draw) {
        Page<DocumentRevision> documentRevision = listDocumentRevision(id, search, pageable);
        long allAvailableDocumentRevisionDetails = documentRevisionService.countByDocumentId(id.getId());
        return new DatatablesData<DocumentRevision>(documentRevision, allAvailableDocumentRevisionDetails, draw);
    }
    
    public void DocumentController.populateForm(Model model) {
        populateFomats(model);
    }
    
    public void DocumentController.populateFomats(Model model) {
        model.addAttribute("application_locale", LocaleContextHolder.getLocale().getLanguage());
    }
    
}
