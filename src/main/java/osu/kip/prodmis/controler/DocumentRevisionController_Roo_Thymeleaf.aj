// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package osu.kip.prodmis.controler;

import javax.validation.Valid;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;
import osu.kip.prodmis.controler.DocumentRevisionController;
import osu.kip.prodmis.datatables.DatatablesData;
import osu.kip.prodmis.datatables.DatatablesPageable;
import osu.kip.prodmis.domain.DocumentRevision;
import osu.kip.prodmis.repository.GlobalSearch;

privileged aspect DocumentRevisionController_Roo_Thymeleaf {
    
    @RequestMapping(method = RequestMethod.GET, produces = MediaType.TEXT_HTML_VALUE)
    public String DocumentRevisionController.list(Model model) {
        return "documentrevisions/list";
    }
    
    @RequestMapping(method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseBody
    public Page<DocumentRevision> DocumentRevisionController.list(GlobalSearch search, Pageable pageable) {
        Page<DocumentRevision> documentRevision = documentRevisionService.findAll(search, pageable);
        return documentRevision;
    }
    
    @RequestMapping(method = RequestMethod.GET, produces = "application/vnd.datatables+json")
    @ResponseBody
    public DatatablesData<DocumentRevision> DocumentRevisionController.list(GlobalSearch search, DatatablesPageable pageable, @RequestParam("draw") Integer draw) {
        Page<DocumentRevision> documentRevision = list(search, pageable);
        long allAvailableDocumentRevision = documentRevisionService.count();
        return new DatatablesData<DocumentRevision>(documentRevision, allAvailableDocumentRevision, draw);
    }
    
    @RequestMapping(value = "/create-form", method = RequestMethod.GET, produces = MediaType.TEXT_HTML_VALUE)
    public String DocumentRevisionController.createForm(Model model) {
        model.addAttribute(new DocumentRevision());
        populateForm(model);
        return "documentrevisions/create";
    }
    
    @RequestMapping(method = RequestMethod.POST, produces = MediaType.TEXT_HTML_VALUE)
    public String DocumentRevisionController.create(@Valid @ModelAttribute DocumentRevision documentRevision, BindingResult result, RedirectAttributes redirectAttrs, Model model) {
        if (result.hasErrors()) {
            populateForm(model);
            return "documentrevisions/create";
        }
        DocumentRevision newDocumentRevision = documentRevisionService.save(documentRevision);
        redirectAttrs.addAttribute("id", newDocumentRevision.getId());
        return "redirect:/documentrevisions/{id}";
    }
    
    @RequestMapping(value = "/{documentRevision}/edit-form", method = RequestMethod.GET, produces = MediaType.TEXT_HTML_VALUE)
    public String DocumentRevisionController.editForm(@PathVariable("documentRevision") DocumentRevision documentRevision, Model model) {
        populateForm(model);
        return "documentrevisions/edit";
    }
    
    @RequestMapping(value = "/{documentRevision}", method = RequestMethod.PUT, produces = MediaType.TEXT_HTML_VALUE)
    public String DocumentRevisionController.update(@Valid @ModelAttribute DocumentRevision documentRevision, BindingResult result, RedirectAttributes redirectAttrs, Model model) {
        if (result.hasErrors()) {
            populateForm(model);
            return "documentrevisions/edit";
        }
        DocumentRevision savedDocumentRevision = documentRevisionService.save(documentRevision);
        redirectAttrs.addAttribute("id", savedDocumentRevision.getId());
        return "redirect:/documentrevisions/{id}";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, produces = MediaType.TEXT_HTML_VALUE)
    public String DocumentRevisionController.delete(@PathVariable("id") Long id, Model model) {
        documentRevisionService.delete(id);
        return "redirect:/documentrevisions";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseBody
    public ResponseEntity DocumentRevisionController.delete(@PathVariable("id") Long id) {
        documentRevisionService.delete(id);
        return new ResponseEntity(HttpStatus.OK);
    }
    
    @RequestMapping(value = "/{documentRevision}", method = RequestMethod.GET, produces = MediaType.TEXT_HTML_VALUE)
    public String DocumentRevisionController.show(@PathVariable("documentRevision") DocumentRevision documentRevision, Model model) {
        return "documentrevisions/show";
    }
    
    public void DocumentRevisionController.populateForm(Model model) {
        populateFomats(model);
    }
    
    public void DocumentRevisionController.populateFomats(Model model) {
        model.addAttribute("application_locale", LocaleContextHolder.getLocale().getLanguage());
    }
    
}
