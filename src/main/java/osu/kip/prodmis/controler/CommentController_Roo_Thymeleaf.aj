// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package osu.kip.prodmis.controler;

import javax.validation.Valid;
import org.joda.time.format.DateTimeFormat;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;
import osu.kip.prodmis.controler.CommentController;
import osu.kip.prodmis.datatables.DatatablesData;
import osu.kip.prodmis.datatables.DatatablesPageable;
import osu.kip.prodmis.domain.Comment;
import osu.kip.prodmis.repository.GlobalSearch;

privileged aspect CommentController_Roo_Thymeleaf {
    
    @RequestMapping(method = RequestMethod.GET, produces = MediaType.TEXT_HTML_VALUE)
    public String CommentController.list(Model model) {
        return "comments/list";
    }
    
    @RequestMapping(method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseBody
    public Page<Comment> CommentController.list(GlobalSearch search, Pageable pageable) {
        Page<Comment> comment = commentService.findAll(search, pageable);
        return comment;
    }
    
    @RequestMapping(method = RequestMethod.GET, produces = "application/vnd.datatables+json")
    @ResponseBody
    public DatatablesData<Comment> CommentController.list(GlobalSearch search, DatatablesPageable pageable, @RequestParam("draw") Integer draw) {
        Page<Comment> comment = list(search, pageable);
        long allAvailableComment = commentService.count();
        return new DatatablesData<Comment>(comment, allAvailableComment, draw);
    }
    
    @RequestMapping(value = "/create-form", method = RequestMethod.GET, produces = MediaType.TEXT_HTML_VALUE)
    public String CommentController.createForm(Model model) {
        model.addAttribute(new Comment());
        populateForm(model);
        return "comments/create";
    }
    
    @RequestMapping(method = RequestMethod.POST, produces = MediaType.TEXT_HTML_VALUE)
    public String CommentController.create(@Valid @ModelAttribute Comment comment, BindingResult result, RedirectAttributes redirectAttrs, Model model) {
        if (result.hasErrors()) {
            populateForm(model);
            return "comments/create";
        }
        Comment newComment = commentService.save(comment);
        redirectAttrs.addAttribute("id", newComment.getId());
        return "redirect:/comments/{id}";
    }
    
    @RequestMapping(value = "/{comment}/edit-form", method = RequestMethod.GET, produces = MediaType.TEXT_HTML_VALUE)
    public String CommentController.editForm(@PathVariable("comment") Comment comment, Model model) {
        populateForm(model);
        return "comments/edit";
    }
    
    @RequestMapping(value = "/{comment}", method = RequestMethod.PUT, produces = MediaType.TEXT_HTML_VALUE)
    public String CommentController.update(@Valid @ModelAttribute Comment comment, BindingResult result, RedirectAttributes redirectAttrs, Model model) {
        if (result.hasErrors()) {
            populateForm(model);
            return "comments/edit";
        }
        Comment savedComment = commentService.save(comment);
        redirectAttrs.addAttribute("id", savedComment.getId());
        return "redirect:/comments/{id}";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, produces = MediaType.TEXT_HTML_VALUE)
    public String CommentController.delete(@PathVariable("id") Long id, Model model) {
        commentService.delete(id);
        return "redirect:/comments";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseBody
    public ResponseEntity CommentController.delete(@PathVariable("id") Long id) {
        commentService.delete(id);
        return new ResponseEntity(HttpStatus.OK);
    }
    
    @RequestMapping(value = "/{comment}", method = RequestMethod.GET, produces = MediaType.TEXT_HTML_VALUE)
    public String CommentController.show(@PathVariable("comment") Comment comment, Model model) {
        return "comments/show";
    }
    
    public void CommentController.populateForm(Model model) {
        populateFomats(model);
    }
    
    public void CommentController.populateFomats(Model model) {
        model.addAttribute("application_locale", LocaleContextHolder.getLocale().getLanguage());
        model.addAttribute("created_date_format", DateTimeFormat.patternForStyle("M-", LocaleContextHolder.getLocale()));
        model.addAttribute("lastUpdate_date_format", DateTimeFormat.patternForStyle("M-", LocaleContextHolder.getLocale()));
    }
    
}
