// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package osu.kip.prodmis.service.impl;

import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import osu.kip.prodmis.domain.Document;
import osu.kip.prodmis.domain.DocumentRevision;
import osu.kip.prodmis.domain.UserLogin;
import osu.kip.prodmis.repository.DocumentRevisionRepository;
import osu.kip.prodmis.repository.GlobalSearch;
import osu.kip.prodmis.service.api.DocumentRevisionService;
import osu.kip.prodmis.service.impl.DocumentRevisionServiceImpl;

privileged aspect DocumentRevisionServiceImpl_Roo_Service_Impl {
    
    declare parents: DocumentRevisionServiceImpl implements DocumentRevisionService;
    
    declare @type: DocumentRevisionServiceImpl: @Service;
    
    declare @type: DocumentRevisionServiceImpl: @Transactional(readOnly = true);
    
    public DocumentRevisionRepository DocumentRevisionServiceImpl.documentRevisionRepository;
    
    @Autowired
    public DocumentRevisionServiceImpl.new(DocumentRevisionRepository documentRevisionRepository) {
        this.documentRevisionRepository = documentRevisionRepository;
    }

    @Transactional(readOnly = false)
    public DocumentRevision DocumentRevisionServiceImpl.save(DocumentRevision entity) {
        return documentRevisionRepository.save(entity);
    }
    
    @Transactional(readOnly = false)
    public void DocumentRevisionServiceImpl.delete(Long id) {
         documentRevisionRepository.delete(id);
    }
    
    @Transactional(readOnly = false)
    public List<DocumentRevision> DocumentRevisionServiceImpl.save(Iterable<DocumentRevision> entities) {
        return documentRevisionRepository.save(entities);
    }
    
    @Transactional(readOnly = false)
    public void DocumentRevisionServiceImpl.delete(Iterable<Long> ids) {
        List<DocumentRevision> toDelete = documentRevisionRepository.findAll(ids);
        documentRevisionRepository.deleteInBatch(toDelete);
    }
    
    public List<DocumentRevision> DocumentRevisionServiceImpl.findAll() {
        return documentRevisionRepository.findAll();
    }
    
    public List<DocumentRevision> DocumentRevisionServiceImpl.findAll(Iterable<Long> ids) {
        return documentRevisionRepository.findAll(ids);
    }
    
    public DocumentRevision DocumentRevisionServiceImpl.findOne(Long id) {
        return documentRevisionRepository.findOne(id);
    }
    
    public long DocumentRevisionServiceImpl.count() {
        return documentRevisionRepository.count();
    }
    
    public Page<DocumentRevision> DocumentRevisionServiceImpl.findAll(GlobalSearch globalSearch, Pageable pageable) {
        return documentRevisionRepository.findAll(globalSearch, pageable);
    }
    
    public Long DocumentRevisionServiceImpl.countByDocumentId(Long id) {
        return documentRevisionRepository.countByDocumentId(id);
    }
    
    public Long DocumentRevisionServiceImpl.countByCreatedById(Long id) {
        return documentRevisionRepository.countByCreatedById(id);
    }
    
    public Page<DocumentRevision> DocumentRevisionServiceImpl.findAllByDocument(Document documentField, GlobalSearch globalSearch, Pageable pageable) {
        return documentRevisionRepository.findAllByDocument(documentField, globalSearch, pageable);
    }
    
    public Page<DocumentRevision> DocumentRevisionServiceImpl.findAllByUserLogin(UserLogin userLoginField, GlobalSearch globalSearch, Pageable pageable) {
        return documentRevisionRepository.findAllByUserLogin(userLoginField, globalSearch, pageable);
    }
    
}
