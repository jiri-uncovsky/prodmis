// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package osu.kip.prodmis.repository;

import com.mysema.query.BooleanBuilder;
import com.mysema.query.jpa.JPQLQuery;
import com.mysema.query.types.Order;
import com.mysema.query.types.OrderSpecifier;
import com.mysema.query.types.path.NumberPath;
import java.util.List;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.transaction.annotation.Transactional;
import osu.kip.prodmis.domain.Document;
import osu.kip.prodmis.domain.DocumentRevision;
import osu.kip.prodmis.domain.QDocumentRevision;
import osu.kip.prodmis.domain.UserLogin;
import osu.kip.prodmis.repository.DocumentRevisionRepositoryCustom;
import osu.kip.prodmis.repository.DocumentRevisionRepositoryImpl;
import osu.kip.prodmis.repository.GlobalSearch;

privileged aspect DocumentRevisionRepositoryImpl_Roo_Jpa_Repository_Impl {
    
    declare parents: DocumentRevisionRepositoryImpl implements DocumentRevisionRepositoryCustom;
    
    declare @type: DocumentRevisionRepositoryImpl: @Transactional(readOnly = true);
    
    public Page<DocumentRevision> DocumentRevisionRepositoryImpl.findAll(GlobalSearch globalSearch, Pageable pageable) {
        NumberPath<Long> idDocumentRevision = new NumberPath<Long>(Long.class, "id");
        QDocumentRevision documentRevision = QDocumentRevision.documentRevision;
        JPQLQuery query = getQueryFrom(documentRevision);
        BooleanBuilder where = new BooleanBuilder();

        if (globalSearch != null) {
            String txt = globalSearch.getText();
            where.and(
                documentRevision.revisionVersion.containsIgnoreCase(txt)
                .or(documentRevision.comment.containsIgnoreCase(txt))
                .or(documentRevision.state.containsIgnoreCase(txt))
                .or(documentRevision.fileName.containsIgnoreCase(txt))
                .or(documentRevision.filePath.containsIgnoreCase(txt))
            );

        }
        query.where(where);

        long totalFound = query.count();
        if (pageable != null) {
            if (pageable.getSort() != null) {
                for (Sort.Order order : pageable.getSort()) {
                    Order direction = order.isAscending() ? Order.ASC : Order.DESC;

                    switch(order.getProperty()){
                        case "revisionVersion":
                           query.orderBy(new OrderSpecifier<String>(direction, documentRevision.revisionVersion));
                           break;
                        case "comment":
                           query.orderBy(new OrderSpecifier<String>(direction, documentRevision.comment));
                           break;
                        case "state":
                           query.orderBy(new OrderSpecifier<String>(direction, documentRevision.state));
                           break;
                        case "fileName":
                           query.orderBy(new OrderSpecifier<String>(direction, documentRevision.fileName));
                           break;
                        case "filePath":
                           query.orderBy(new OrderSpecifier<String>(direction, documentRevision.filePath));
                           break;
                    }
                }
            }
            query.offset(pageable.getOffset()).limit(pageable.getPageSize());
        }
        query.orderBy(idDocumentRevision.asc());
        
        List<DocumentRevision> results = query.list(documentRevision);
        return new PageImpl<DocumentRevision>(results, pageable, totalFound);
    }
    
    public Page<DocumentRevision> DocumentRevisionRepositoryImpl.findAllByUserLogin(UserLogin userLoginField, GlobalSearch globalSearch, Pageable pageable) {
        NumberPath<Long> idDocumentRevision = new NumberPath<Long>(Long.class, "id");
        QDocumentRevision documentRevision = QDocumentRevision.documentRevision;
        JPQLQuery query = getQueryFrom(documentRevision);
        BooleanBuilder where = new BooleanBuilder(documentRevision.createdBy.eq(userLoginField));

        if (globalSearch != null) {
            String txt = globalSearch.getText();
            where.and(
                documentRevision.revisionVersion.containsIgnoreCase(txt)
                .or(documentRevision.comment.containsIgnoreCase(txt))
                .or(documentRevision.state.containsIgnoreCase(txt))
                .or(documentRevision.fileName.containsIgnoreCase(txt))
                .or(documentRevision.filePath.containsIgnoreCase(txt))
            );

        }
        query.where(where);

        long totalFound = query.count();
        if (pageable != null) {
            if (pageable.getSort() != null) {
                for (Sort.Order order : pageable.getSort()) {
                    Order direction = order.isAscending() ? Order.ASC : Order.DESC;

                    switch(order.getProperty()){
                        case "revisionVersion":
                           query.orderBy(new OrderSpecifier<String>(direction, documentRevision.revisionVersion));
                           break;
                        case "comment":
                           query.orderBy(new OrderSpecifier<String>(direction, documentRevision.comment));
                           break;
                        case "state":
                           query.orderBy(new OrderSpecifier<String>(direction, documentRevision.state));
                           break;
                        case "fileName":
                           query.orderBy(new OrderSpecifier<String>(direction, documentRevision.fileName));
                           break;
                        case "filePath":
                           query.orderBy(new OrderSpecifier<String>(direction, documentRevision.filePath));
                           break;
                    }
                }
            }
            query.offset(pageable.getOffset()).limit(pageable.getPageSize());
        }
        query.orderBy(idDocumentRevision.asc());
        
        List<DocumentRevision> results = query.list(documentRevision);
        return new PageImpl<DocumentRevision>(results, pageable, totalFound);
    }
    
    public Page<DocumentRevision> DocumentRevisionRepositoryImpl.findAllByDocument(Document documentField, GlobalSearch globalSearch, Pageable pageable) {
        NumberPath<Long> idDocumentRevision = new NumberPath<Long>(Long.class, "id");
        QDocumentRevision documentRevision = QDocumentRevision.documentRevision;
        JPQLQuery query = getQueryFrom(documentRevision);
        BooleanBuilder where = new BooleanBuilder(documentRevision.document.eq(documentField));

        if (globalSearch != null) {
            String txt = globalSearch.getText();
            where.and(
                documentRevision.revisionVersion.containsIgnoreCase(txt)
                .or(documentRevision.comment.containsIgnoreCase(txt))
                .or(documentRevision.state.containsIgnoreCase(txt))
                .or(documentRevision.fileName.containsIgnoreCase(txt))
                .or(documentRevision.filePath.containsIgnoreCase(txt))
            );

        }
        query.where(where);

        long totalFound = query.count();
        if (pageable != null) {
            if (pageable.getSort() != null) {
                for (Sort.Order order : pageable.getSort()) {
                    Order direction = order.isAscending() ? Order.ASC : Order.DESC;

                    switch(order.getProperty()){
                        case "revisionVersion":
                           query.orderBy(new OrderSpecifier<String>(direction, documentRevision.revisionVersion));
                           break;
                        case "comment":
                           query.orderBy(new OrderSpecifier<String>(direction, documentRevision.comment));
                           break;
                        case "state":
                           query.orderBy(new OrderSpecifier<String>(direction, documentRevision.state));
                           break;
                        case "fileName":
                           query.orderBy(new OrderSpecifier<String>(direction, documentRevision.fileName));
                           break;
                        case "filePath":
                           query.orderBy(new OrderSpecifier<String>(direction, documentRevision.filePath));
                           break;
                    }
                }
            }
            query.offset(pageable.getOffset()).limit(pageable.getPageSize());
        }
        query.orderBy(idDocumentRevision.asc());
        
        List<DocumentRevision> results = query.list(documentRevision);
        return new PageImpl<DocumentRevision>(results, pageable, totalFound);
    }
    
}
