// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package osu.kip.prodmis.service.impl;

import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import osu.kip.prodmis.domain.Comment;
import osu.kip.prodmis.domain.Product;
import osu.kip.prodmis.domain.UserLogin;
import osu.kip.prodmis.repository.CommentRepository;
import osu.kip.prodmis.repository.GlobalSearch;
import osu.kip.prodmis.service.api.CommentService;
import osu.kip.prodmis.service.impl.CommentServiceImpl;

privileged aspect CommentServiceImpl_Roo_Service_Impl {
    
    declare parents: CommentServiceImpl implements CommentService;
    
    declare @type: CommentServiceImpl: @Service;
    
    declare @type: CommentServiceImpl: @Transactional(readOnly = true);
    
    public CommentRepository CommentServiceImpl.commentRepository;
    
    @Autowired
    public CommentServiceImpl.new(CommentRepository commentRepository) {
        this.commentRepository = commentRepository;
    }

    @Transactional(readOnly = false)
    public Comment CommentServiceImpl.save(Comment entity) {
        return commentRepository.save(entity);
    }
    
    @Transactional(readOnly = false)
    public void CommentServiceImpl.delete(Long id) {
         commentRepository.delete(id);
    }
    
    @Transactional(readOnly = false)
    public List<Comment> CommentServiceImpl.save(Iterable<Comment> entities) {
        return commentRepository.save(entities);
    }
    
    @Transactional(readOnly = false)
    public void CommentServiceImpl.delete(Iterable<Long> ids) {
        List<Comment> toDelete = commentRepository.findAll(ids);
        commentRepository.deleteInBatch(toDelete);
    }
    
    public List<Comment> CommentServiceImpl.findAll() {
        return commentRepository.findAll();
    }
    
    public List<Comment> CommentServiceImpl.findAll(Iterable<Long> ids) {
        return commentRepository.findAll(ids);
    }
    
    public Comment CommentServiceImpl.findOne(Long id) {
        return commentRepository.findOne(id);
    }
    
    public long CommentServiceImpl.count() {
        return commentRepository.count();
    }
    
    public Page<Comment> CommentServiceImpl.findAll(GlobalSearch globalSearch, Pageable pageable) {
        return commentRepository.findAll(globalSearch, pageable);
    }
    
    public Long CommentServiceImpl.countByProductId(Long id) {
        return commentRepository.countByProductId(id);
    }
    
    public Long CommentServiceImpl.countByUserLoginId(Long id) {
        return commentRepository.countByUserLoginId(id);
    }
    
    public Long CommentServiceImpl.countByReplyToId(Long id) {
        return commentRepository.countByReplyToId(id);
    }
    
    public Page<Comment> CommentServiceImpl.findAllByProduct(Product productField, GlobalSearch globalSearch, Pageable pageable) {
        return commentRepository.findAllByProduct(productField, globalSearch, pageable);
    }
    
    public Page<Comment> CommentServiceImpl.findAllByUserLogin(UserLogin userLoginField, GlobalSearch globalSearch, Pageable pageable) {
        return commentRepository.findAllByUserLogin(userLoginField, globalSearch, pageable);
    }
    
    public Page<Comment> CommentServiceImpl.findAllByComment(Comment commentField, GlobalSearch globalSearch, Pageable pageable) {
        return commentRepository.findAllByComment(commentField, globalSearch, pageable);
    }
    
}
